type Literal {
  String(str),
  Integer(int),
  Float(float),
  Char(char)
}

extend show<Literal> {
  fn show_prec(x, _) => switch x {
    case String(s) => s.show_prec(1)
    case Integer(i) => i.show()
    case Float(f) => f.show()
    case Char(c) => c.show()
  }
}

extend equality<Literal> {
  fn (==) (x, y) => switch (x, y) {
    case (String(a), String(b)) => 
      a == b
    case (Integer(a), Integer(b)) => 
      a == b
    case (Float(a), Float(b)) => 
      a == b
    case (Char(a), Char(b)) => 
      a == b
    case _ => false
  }
}