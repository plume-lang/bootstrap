require "mod:thomasvergne/plume-combinator"
require "mod:thomasvergne/plume-combinator/library/char"
require "expression/literal"
require "expression"
require "operator"

mut operators: list<Operator> = []

parseString = (character('"') >> many(none_of(['"'])) << character('"')) >>= 
  fn (chars) => pure(chars.implode())

parseNumber = character('-').optional() >>= 
  fn (sign) => many1(digit) >>= 
    fn (digits) {
      number = digits.implode().ffi_to_int()

      if (sign.is_some()) {
        return pure(number.negate())
      } else {
        return pure(number)
      }
    }

natural = many1(digit) >>= fn (digits) =>
  pure(digits.implode().ffi_to_int())

parseFloat = parseNumber >>= 
  fn (real) =>
    character('.') >> many1(digit) >>= 
      fn (fraction) {
        number = fraction.implode()
        real_str = real.to_string()

        final = real_str + "." + number

        return pure(final.ffi_to_float())
      }

parseLiteral = parseString.map(String) 
            <|> parseFloat.map(Float).try() 
            <|> parseNumber.map(Integer)

varIdentifier = identifier.map(implode)

parseVariable = varIdentifier.map(Variable)

declare parseExpression: fn(): Parser<Expression>

parseArguments = parseExpression
  .lazy()
  .sep_by(lex_char(','))
  .parens()

parseLambda = lex_string(['f', 'n']) >> varIdentifier
  .sep_by(lex_char(','))
  .parens() >>= 
    fn (params) => parseExpression.lazy() >>= 
      fn (body) => pure(Lambda(params, body))

fn locate(p: Parser<Expression>): Parser<Expression> =>
  location >>= fn (l1) =>
    p >>= fn (expr) =>
      location >>= fn (l2) =>
        pure(Locate(expr, (l1, l2)))

parseTerm =
  choice([
    parseLiteral.map(Literal),
    parseVariable,
    parseLambda,
    parseExpression.lazy().parens()
  ])

fn parseExpression(): Parser<Expression> {
  ops = (*operators).sort_on(fn(a, b) => switch (a, b) {
    case (Operator(_, _, prec1), Operator(_, _, prec2)) => prec1 < prec2
  }).map(fn(op) => [parseCustomOperator(op)])

  return build_expression_parser(list_concat(ops, [
    [
      InfixF(
        lex_char('^') >> pure(fn (a, b) => Application(Variable("^"), [a, b]))
      )
    ],
    [
      InfixF(
        lex_char('*') >> pure(fn (a, b) => Application(Variable("*"), [a, b]))
      ),
      InfixF(
        lex_char('/') >> pure(fn (a, b) => Application(Variable("/"), [a, b]))
      )
    ],
    [
      InfixF(
        lex_char('+') >> pure(fn (a, b) => Application(Variable("+"), [a, b]))
      ),
      InfixF(
        lex_char('-') >> pure(fn (a, b) => Application(Variable("-"), [a, b]))
      )
    ],
    [
      PostfixF(parseArguments.many1() >>= fn (argss) => 
        pure(fn (callee) =>
          argss.foldl(fn(acc, args) => Application(acc, args), callee)
        )
      )
    ]
  ]), parseTerm).locate()
}

parseOperatorDefinition = 
  choice([
    lex_str("infix") >> pure(Infix),
    lex_str("prefix") >> pure(Prefix),
    lex_str("postfix") >> pure(Postfix)
  ]) >>= fn (ty) =>
    parseOp >>= fn (name) =>
      natural >>= fn (prec) {
        operators += [Operator(ty, name.implode(), prec)]
        return pure(None)
      }

parseTopFunction = 
  lex_str("fn") >> varIdentifier >>= fn (id) =>
    varIdentifier.sep_by(lex_char(',')).parens() >>= fn (args) => 
      lex_str("=>") >> parseExpression.lazy() >>= 
        fn (body) => pure(Definition(id, Lambda(args, body)))

parseToplevel = choice([
  parseOperatorDefinition,
  parseTopFunction.map(Some),
  parseExpression.lazy().map(Expression).map(Some)
])

scn = (newline <|> space).many()

parseProgram = parseToplevel
  .sep_by(scn)
  .map(nub_maybe)
  .between(scn, scn)
