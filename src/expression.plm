pub require "expression/literal"
pub require "expression/type"
require "mod:thomasvergne/plume-combinator"

type Annotation<A> {
  Annotated(str, A)
}

type Expression {
  Variable(Annotation<Option<Type>>),
  Literal(Literal),
  Application(Expression, list<Expression>),
  Lambda(list<Annotation<Option<Type>>>, Option<Type>, Expression),
  Locate(Expression, (Location, Location))
}

type Toplevel {
  Expression(Expression),
  Definition(Annotation<Type>, Expression)
}

extend<A extends show> show<Annotation<Option<A>>> {
  fn show_prec(x, _) => switch x {
    case Annotated(name, annot) => switch annot {
      case Some(ty) => name + ": " + ty.show()
      case None => name.show()
    }
  }
}

extend show<Annotation<Type>> {
  fn show_prec(x, _) => switch x {
    case Annotated(name, ty) => name + ": " + ty.show()
  }
}

extend<A extends equality> equality<Annotation<A>> {
  fn (==) (x, y) => switch (x, y) {
    case (Annotated(a, b), Annotated(c, d)) => 
      a == c and b == d
  }
}

extend show<Expression> {
  fn show_prec(x, _) => switch x {
    case Variable(name) => name.show()
    case Literal(lit) => show(lit)
    case Application(f, args) => show(f) + "(" + join_str(args.map(show), ", ") + ")"
    case Lambda(params, ret1, body) {
      ret = switch ret1 {
        case Some(ty) => ": " + ty.show()
        case None => ""
      }

      return "fn(" + join_str(params.map(show), ", ") + ")" + ret + " => " + show(body)
    }
    case Locate(expr, loc) => expr.show()
    case ? => "Unknown"
  }
}

extend show<Toplevel> {
  fn show_prec(x, _) => switch x {
    case Expression(expr) => show(expr)
    case Definition(name, expr) => name.show() + " = " + expr.show()
  }
}

extend equality<Expression> {
  fn (==) (x, y) => switch (x, y) {
    case (Variable(a), Variable(b)) => 
      a == b
    case (Literal(a), Literal(b)) => 
      a == b
    case (Application(f1, args1), Application(f2, args2)) => 
      f1 == f2 and args1 == args2
    case (Lambda(params1, ret1, body1), Lambda(params2, ret2, body2)) => 
      params1 == params2 and body1 == body2 and ret1 == ret2
    case (Locate(expr1, ?), Locate(expr2, ?)) =>
      expr1 == expr2
    case ? => false
  }
}

extend equality<Toplevel> {
  fn (==) (x, y) => switch (x, y) {
    case (Expression(a), Expression(b)) => 
      a == b
    case (Definition(a, b), Definition(c, d)) => 
      a == c and b == d
    case _ => false
  }
}
